-- Crea la tabella per le impostazioni globali dell'applicazione
CREATE TABLE IF NOT EXISTS public.app_settings (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    key text NOT NULL UNIQUE,
    value jsonb,
    description text,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz
);

-- Abilita RLS
ALTER TABLE public.app_settings ENABLE ROW LEVEL SECURITY;

-- Policy: Gli amministratori possono gestire le impostazioni
CREATE POLICY "Admins can manage settings"
ON public.app_settings
FOR ALL
TO authenticated
USING (
  (SELECT is_admin FROM public.profiles WHERE user_id = auth.uid()) = true
)
WITH CHECK (
  (SELECT is_admin FROM public.profiles WHERE user_id = auth.uid()) = true
);

-- Policy: Gli utenti autenticati possono leggere le impostazioni
CREATE POLICY "Authenticated users can read settings"
ON public.app_settings
FOR SELECT
TO authenticated
USING (true);

-- Funzione per aggiornare 'updated_at'
CREATE OR REPLACE FUNCTION public.handle_app_settings_update()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger per aggiornare 'updated_at'
CREATE TRIGGER on_app_settings_update
BEFORE UPDATE ON public.app_settings
FOR EACH ROW
EXECUTE FUNCTION public.handle_app_settings_update();

-- Inserisce il valore di default per la commissione, che ora funzioner√†
INSERT INTO public.app_settings (key, value, description)
SELECT 
  'default_commission_rate', 
  '30'::jsonb, -- Il valore deve essere JSONB
  'Commissione di default della piattaforma in percentuale (es. 30)'
WHERE NOT EXISTS (SELECT 1 FROM public.app_settings WHERE key = 'default_commission_rate');
